{"version":3,"file":"soundtouch.js","sources":["../src/FifoSampleBuffer.js","../src/AbstractFifoSamplePipe.js","../src/RateTransposer.js","../src/FilterSupport.js","../src/noop.js","../src/SimpleFilter.js","../src/Stretch.js","../src/testFloatEqual.js","../src/SoundTouch.js","../src/WebAudioBufferSource.js","../src/getWebAudioNode.js","../src/minsSecs.js","../src/PitchShifter.js"],"sourcesContent":["/*\n * SoundTouch JS audio processing library\n * Copyright (c) Olli Parviainen\n * Copyright (c) Ryan Berdeen\n * Copyright (c) Jakub Fiala\n * Copyright (c) Steve 'Cutter' Blades\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\n\nexport default class FifoSampleBuffer {\n  constructor() {\n    this._vector = new Float32Array();\n    this._position = 0;\n    this._frameCount = 0;\n  }\n\n  get vector() {\n    return this._vector;\n  }\n\n  get position() {\n    return this._position;\n  }\n\n  get startIndex() {\n    return this._position * 2;\n  }\n\n  get frameCount() {\n    return this._frameCount;\n  }\n\n  get endIndex() {\n    return (this._position + this._frameCount) * 2;\n  }\n\n  clear() {\n    this.receive(this._frameCount);\n    this.rewind();\n  }\n\n  put(numFrames) {\n    this._frameCount += numFrames;\n  }\n\n  putSamples(samples, position, numFrames = 0) {\n    position = position || 0;\n    const sourceOffset = position * 2;\n    if (!(numFrames >= 0)) {\n      numFrames = (samples.length - sourceOffset) / 2;\n    }\n    const numSamples = numFrames * 2;\n\n    this.ensureCapacity(numFrames + this._frameCount);\n\n    const destOffset = this.endIndex;\n    this.vector.set(\n      samples.subarray(sourceOffset, sourceOffset + numSamples),\n      destOffset\n    );\n\n    this._frameCount += numFrames;\n  }\n\n  putBuffer(buffer, position, numFrames = 0) {\n    position = position || 0;\n    if (!(numFrames >= 0)) {\n      numFrames = buffer.frameCount - position;\n    }\n    this.putSamples(buffer.vector, buffer.position + position, numFrames);\n  }\n\n  receive(numFrames) {\n    if (!(numFrames >= 0) || numFrames > this._frameCount) {\n      numFrames = this.frameCount;\n    }\n    this._frameCount -= numFrames;\n    this._position += numFrames;\n  }\n\n  receiveSamples(output, numFrames = 0) {\n    const numSamples = numFrames * 2;\n    const sourceOffset = this.startIndex;\n    output.set(this._vector.subarray(sourceOffset, sourceOffset + numSamples));\n    this.receive(numFrames);\n  }\n\n  extract(output, position = 0, numFrames = 0) {\n    const sourceOffset = this.startIndex + position * 2;\n    const numSamples = numFrames * 2;\n    output.set(this._vector.subarray(sourceOffset, sourceOffset + numSamples));\n  }\n\n  ensureCapacity(numFrames = 0) {\n    const minLength = parseInt(numFrames * 2);\n    if (this._vector.length < minLength) {\n      const newVector = new Float32Array(minLength);\n      newVector.set(this._vector.subarray(this.startIndex, this.endIndex));\n      this._vector = newVector;\n      this._position = 0;\n    } else {\n      this.rewind();\n    }\n  }\n\n  ensureAdditionalCapacity(numFrames = 0) {\n    this.ensureCapacity(this._frameCount + numFrames);\n  }\n\n  rewind() {\n    if (this._position > 0) {\n      this._vector.set(this._vector.subarray(this.startIndex, this.endIndex));\n      this._position = 0;\n    }\n  }\n}\n","/*\n * SoundTouch JS audio processing library\n * Copyright (c) Olli Parviainen\n * Copyright (c) Ryan Berdeen\n * Copyright (c) Jakub Fiala\n * Copyright (c) Steve 'Cutter' Blades\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\n\nimport FifoSampleBuffer from './FifoSampleBuffer';\n\nexport default class AbstractFifoSamplePipe {\n  constructor(createBuffers) {\n    if (createBuffers) {\n      this._inputBuffer = new FifoSampleBuffer();\n      this._outputBuffer = new FifoSampleBuffer();\n    } else {\n      this._inputBuffer = this._outputBuffer = null;\n    }\n  }\n\n  get inputBuffer() {\n    return this._inputBuffer;\n  }\n\n  set inputBuffer(inputBuffer) {\n    this._inputBuffer = inputBuffer;\n  }\n\n  get outputBuffer() {\n    return this._outputBuffer;\n  }\n\n  set outputBuffer(outputBuffer) {\n    this._outputBuffer = outputBuffer;\n  }\n\n  clear() {\n    this._inputBuffer.clear();\n    this._outputBuffer.clear();\n  }\n}\n","/*\n * SoundTouch JS audio processing library\n * Copyright (c) Olli Parviainen\n * Copyright (c) Ryan Berdeen\n * Copyright (c) Jakub Fiala\n * Copyright (c) Steve 'Cutter' Blades\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\n\nimport AbstractFifoSamplePipe from './AbstractFifoSamplePipe';\n\nexport default class RateTransposer extends AbstractFifoSamplePipe {\n  constructor(createBuffers) {\n    super(createBuffers);\n    this.reset();\n    this._rate = 1;\n  }\n\n  set rate(rate) {\n    this._rate = rate;\n    // TODO: aa filter\n  }\n\n  reset() {\n    this.slopeCount = 0;\n    this.prevSampleL = 0;\n    this.prevSampleR = 0;\n  }\n\n  clone() {\n    const result = new RateTransposer();\n    result.rate = this._rate;\n    return result;\n  }\n\n  process() {\n    // TODO: aa filter\n    const numFrames = this._inputBuffer.frameCount;\n    this._outputBuffer.ensureAdditionalCapacity(numFrames / this._rate + 1);\n    const numFramesOutput = this.transpose(numFrames);\n    this._inputBuffer.receive();\n    this._outputBuffer.put(numFramesOutput);\n  }\n\n  transpose(numFrames = 0) {\n    if (numFrames === 0) {\n      return 0;\n    }\n\n    const src = this._inputBuffer.vector;\n    const srcOffset = this._inputBuffer.startIndex;\n\n    const dest = this._outputBuffer.vector;\n    const destOffset = this._outputBuffer.endIndex;\n\n    let used = 0;\n    let i = 0;\n\n    while (this.slopeCount < 1.0) {\n      dest[destOffset + 2 * i] =\n        (1.0 - this.slopeCount) * this.prevSampleL +\n        this.slopeCount * src[srcOffset];\n      dest[destOffset + 2 * i + 1] =\n        (1.0 - this.slopeCount) * this.prevSampleR +\n        this.slopeCount * src[srcOffset + 1];\n      i = i + 1;\n      this.slopeCount += this._rate;\n    }\n\n    this.slopeCount -= 1.0;\n\n    if (numFrames !== 1) {\n      // eslint-disable-next-line no-constant-condition\n      out: while (true) {\n        while (this.slopeCount > 1.0) {\n          this.slopeCount -= 1.0;\n          used = used + 1;\n          if (used >= numFrames - 1) {\n            break out;\n          }\n        }\n\n        const srcIndex = srcOffset + 2 * used;\n        dest[destOffset + 2 * i] =\n          (1.0 - this.slopeCount) * src[srcIndex] +\n          this.slopeCount * src[srcIndex + 2];\n        dest[destOffset + 2 * i + 1] =\n          (1.0 - this.slopeCount) * src[srcIndex + 1] +\n          this.slopeCount * src[srcIndex + 3];\n\n        i = i + 1;\n        this.slopeCount += this._rate;\n      }\n    }\n\n    this.prevSampleL = src[srcOffset + 2 * numFrames - 2];\n    this.prevSampleR = src[srcOffset + 2 * numFrames - 1];\n\n    return i;\n  }\n}\n","/*\n * SoundTouch JS audio processing library\n * Copyright (c) Olli Parviainen\n * Copyright (c) Ryan Berdeen\n * Copyright (c) Jakub Fiala\n * Copyright (c) Steve 'Cutter' Blades\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\n\nexport default class FilterSupport {\n  constructor(pipe) {\n    this._pipe = pipe;\n  }\n\n  get pipe() {\n    return this._pipe;\n  }\n\n  get inputBuffer() {\n    return this._pipe.inputBuffer;\n  }\n\n  get outputBuffer() {\n    return this._pipe.outputBuffer;\n  }\n\n  fillInputBuffer(/*numFrames*/) {\n    throw new Error('fillInputBuffer() not overridden');\n  }\n\n  fillOutputBuffer(numFrames = 0) {\n    while (this.outputBuffer.frameCount < numFrames) {\n      // TODO hardcoded buffer size\n      const numInputFrames = 8192 * 2 - this.inputBuffer.frameCount;\n\n      this.fillInputBuffer(numInputFrames);\n\n      if (this.inputBuffer.frameCount < 8192 * 2) {\n        break;\n        // TODO: flush pipe\n      }\n      this._pipe.process();\n    }\n  }\n\n  clear() {\n    this._pipe.clear();\n  }\n}\n","const noop = function () {\n  return;\n};\n\nexport default noop;\n","/*\n * SoundTouch JS audio processing library\n * Copyright (c) Olli Parviainen\n * Copyright (c) Ryan Berdeen\n * Copyright (c) Jakub Fiala\n * Copyright (c) Steve 'Cutter' Blades\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\n\nimport FilterSupport from './FilterSupport';\nimport noop from './noop';\n\nexport default class SimpleFilter extends FilterSupport {\n  constructor(sourceSound, pipe, callback = noop) {\n    super(pipe);\n    this.callback = callback;\n    this.sourceSound = sourceSound;\n    //this.bufferDuration = sourceSound.buffer.duration;\n    this.historyBufferSize = 22050;\n    this._sourcePosition = 0;\n    this.outputBufferPosition = 0;\n    this._position = 0;\n  }\n\n  get position() {\n    return this._position;\n  }\n\n  set position(position) {\n    if (position > this._position) {\n      throw new RangeError(\n        'New position may not be greater than current position'\n      );\n    }\n    const newOutputBufferPosition =\n      this.outputBufferPosition - (this._position - position);\n    if (newOutputBufferPosition < 0) {\n      throw new RangeError('New position falls outside of history buffer');\n    }\n    this.outputBufferPosition = newOutputBufferPosition;\n    this._position = position;\n  }\n\n  get sourcePosition() {\n    return this._sourcePosition;\n  }\n\n  set sourcePosition(sourcePosition) {\n    this.clear();\n    this._sourcePosition = sourcePosition;\n  }\n\n  onEnd() {\n    this.callback();\n  }\n\n  fillInputBuffer(numFrames = 0) {\n    const samples = new Float32Array(numFrames * 2);\n    const numFramesExtracted = this.sourceSound.extract(\n      samples,\n      numFrames,\n      this._sourcePosition\n    );\n    this._sourcePosition += numFramesExtracted;\n    this.inputBuffer.putSamples(samples, 0, numFramesExtracted);\n  }\n\n  extract(target, numFrames = 0) {\n    this.fillOutputBuffer(this.outputBufferPosition + numFrames);\n\n    const numFramesExtracted = Math.min(\n      numFrames,\n      this.outputBuffer.frameCount - this.outputBufferPosition\n    );\n    this.outputBuffer.extract(\n      target,\n      this.outputBufferPosition,\n      numFramesExtracted\n    );\n\n    const currentFrames = this.outputBufferPosition + numFramesExtracted;\n    this.outputBufferPosition = Math.min(this.historyBufferSize, currentFrames);\n    this.outputBuffer.receive(\n      Math.max(currentFrames - this.historyBufferSize, 0)\n    );\n\n    this._position += numFramesExtracted;\n    return numFramesExtracted;\n  }\n\n  handleSampleData(event) {\n    this.extract(event.data, 4096);\n  }\n\n  clear() {\n    super.clear();\n    this.outputBufferPosition = 0;\n  }\n}\n","/*\n * SoundTouch JS audio processing library\n * Copyright (c) Olli Parviainen\n * Copyright (c) Ryan Berdeen\n * Copyright (c) Jakub Fiala\n * Copyright (c) Steve 'Cutter' Blades\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\n\nimport AbstractFifoSamplePipe from './AbstractFifoSamplePipe';\n\n/**\n * Giving this value for the sequence length sets automatic parameter value\n * according to tempo setting (recommended)\n */\nconst USE_AUTO_SEQUENCE_LEN = 0;\n\n/**\n * Default length of a single processing sequence, in milliseconds. This determines to how\n * long sequences the original sound is chopped in the time-stretch algorithm.\n *\n * The larger this value is, the lesser sequences are used in processing. In principle\n * a bigger value sounds better when slowing down tempo, but worse when increasing tempo\n * and vice versa.\n *\n * Increasing this value reduces computational burden and vice versa.\n */\n//const DEFAULT_SEQUENCE_MS = 130\nconst DEFAULT_SEQUENCE_MS = USE_AUTO_SEQUENCE_LEN;\n\n/**\n * Giving this value for the seek window length sets automatic parameter value\n * according to tempo setting (recommended)\n */\nconst USE_AUTO_SEEKWINDOW_LEN = 0;\n\n/**\n * Seeking window default length in milliseconds for algorithm that finds the best possible\n * overlapping location. This determines from how wide window the algorithm may look for an\n * optimal joining location when mixing the sound sequences back together.\n *\n * The bigger this window setting is, the higher the possibility to find a better mixing\n * position will become, but at the same time large values may cause a 'drifting' artifact\n * because consequent sequences will be taken at more uneven intervals.\n *\n * If there's a disturbing artifact that sounds as if a constant frequency was drifting\n * around, try reducing this setting.\n *\n * Increasing this value increases computational burden and vice versa.\n */\n//const DEFAULT_SEEKWINDOW_MS = 25;\nconst DEFAULT_SEEKWINDOW_MS = USE_AUTO_SEEKWINDOW_LEN;\n\n/**\n * Overlap length in milliseconds. When the chopped sound sequences are mixed back together,\n * to form a continuous sound stream, this parameter defines over how long period the two\n * consecutive sequences are let to overlap each other.\n *\n * This shouldn't be that critical parameter. If you reduce the DEFAULT_SEQUENCE_MS setting\n * by a large amount, you might wish to try a smaller value on this.\n *\n * Increasing this value increases computational burden and vice versa.\n */\nconst DEFAULT_OVERLAP_MS = 8;\n\n// Table for the hierarchical mixing position seeking algorithm\nconst _SCAN_OFFSETS = [\n  [\n    124, 186, 248, 310, 372, 434, 496, 558, 620, 682, 744, 806, 868, 930, 992,\n    1054, 1116, 1178, 1240, 1302, 1364, 1426, 1488, 0,\n  ],\n  [\n    -100, -75, -50, -25, 25, 50, 75, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0,\n  ],\n  [\n    -20, -15, -10, -5, 5, 10, 15, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0,\n  ],\n  [-4, -3, -2, -1, 1, 2, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n];\n\n// Adjust tempo param according to tempo, so that variating processing sequence length is used\n// at varius tempo settings, between the given low...top limits\nconst AUTOSEQ_TEMPO_LOW = 0.25; // auto setting low tempo range (-25%)\nconst AUTOSEQ_TEMPO_TOP = 4.0; // auto setting top tempo range (+100%)\n\n// sequence-ms setting values at above low & top tempo\nconst AUTOSEQ_AT_MIN = 125.0;\nconst AUTOSEQ_AT_MAX = 50.0;\nconst AUTOSEQ_K =\n  (AUTOSEQ_AT_MAX - AUTOSEQ_AT_MIN) / (AUTOSEQ_TEMPO_TOP - AUTOSEQ_TEMPO_LOW);\nconst AUTOSEQ_C = AUTOSEQ_AT_MIN - AUTOSEQ_K * AUTOSEQ_TEMPO_LOW;\n\n// seek-window-ms setting values at above low & top tempo\nconst AUTOSEEK_AT_MIN = 25.0;\nconst AUTOSEEK_AT_MAX = 15.0;\nconst AUTOSEEK_K =\n  (AUTOSEEK_AT_MAX - AUTOSEEK_AT_MIN) / (AUTOSEQ_TEMPO_TOP - AUTOSEQ_TEMPO_LOW);\nconst AUTOSEEK_C = AUTOSEEK_AT_MIN - AUTOSEEK_K * AUTOSEQ_TEMPO_LOW;\n\nexport default class Stretch extends AbstractFifoSamplePipe {\n  constructor(createBuffers) {\n    super(createBuffers);\n    this._quickSeek = true;\n    this.midBufferDirty = false;\n\n    this.midBuffer = null;\n    this.overlapLength = 0;\n\n    this.autoSeqSetting = true;\n    this.autoSeekSetting = true;\n\n    this._tempo = 1;\n    this.setParameters(\n      44100,\n      DEFAULT_SEQUENCE_MS,\n      DEFAULT_SEEKWINDOW_MS,\n      DEFAULT_OVERLAP_MS\n    );\n  }\n\n  clear() {\n    super.clear();\n    this.clearMidBuffer();\n  }\n\n  clearMidBuffer() {\n    if (this.midBufferDirty) {\n      this.midBufferDirty = false;\n      this.midBuffer = null;\n    }\n  }\n\n  /**\n   * Sets routine control parameters. These control are certain time constants\n   * defining how the sound is stretched to the desired duration.\n   *\n   * 'sampleRate' = sample rate of the sound\n   * 'sequenceMS' = one processing sequence length in milliseconds (default = 82 ms)\n   * 'seekwindowMS' = seeking window length for scanning the best overlapping\n   *      position (default = 28 ms)\n   * 'overlapMS' = overlapping length (default = 12 ms)\n   */\n  setParameters(sampleRate, sequenceMs, seekWindowMs, overlapMs) {\n    // accept only positive parameter values - if zero or negative, use old values instead\n    if (sampleRate > 0) {\n      this.sampleRate = sampleRate;\n    }\n\n    if (overlapMs > 0) {\n      this.overlapMs = overlapMs;\n    }\n\n    if (sequenceMs > 0) {\n      this.sequenceMs = sequenceMs;\n      this.autoSeqSetting = false;\n    } else {\n      // zero or below, use automatic setting\n      this.autoSeqSetting = true;\n    }\n\n    if (seekWindowMs > 0) {\n      this.seekWindowMs = seekWindowMs;\n      this.autoSeekSetting = false;\n    } else {\n      // zero or below, use automatic setting\n      this.autoSeekSetting = true;\n    }\n\n    this.calculateSequenceParameters();\n\n    this.calculateOverlapLength(this.overlapMs);\n\n    // set tempo to recalculate 'sampleReq'\n    this.tempo = this._tempo;\n  }\n\n  /**\n   * Sets new target tempo. Normal tempo = 'SCALE', smaller values represent slower\n   * tempo, larger faster tempo.\n   */\n  set tempo(newTempo) {\n    let intskip;\n\n    this._tempo = newTempo;\n\n    // Calculate new sequence duration\n    this.calculateSequenceParameters();\n\n    // Calculate ideal skip length (according to tempo value)\n    this.nominalSkip =\n      this._tempo * (this.seekWindowLength - this.overlapLength);\n    this.skipFract = 0;\n    intskip = Math.floor(this.nominalSkip + 0.5);\n\n    // Calculate how many samples are needed in the 'inputBuffer' to process another batch of samples\n    this.sampleReq =\n      Math.max(intskip + this.overlapLength, this.seekWindowLength) +\n      this.seekLength;\n  }\n\n  get tempo() {\n    return this._tempo;\n  }\n\n  get inputChunkSize() {\n    return this.sampleReq;\n  }\n\n  get outputChunkSize() {\n    return (\n      this.overlapLength +\n      Math.max(0, this.seekWindowLength - 2 * this.overlapLength)\n    );\n  }\n\n  /**\n   * Calculates overlapInMsec period length in samples.\n   */\n  calculateOverlapLength(overlapInMsec = 0) {\n    let newOvl;\n\n    // TODO assert(overlapInMsec >= 0);\n    newOvl = (this.sampleRate * overlapInMsec) / 1000;\n    newOvl = newOvl < 16 ? 16 : newOvl;\n\n    // must be divisible by 8\n    newOvl -= newOvl % 8;\n\n    this.overlapLength = newOvl;\n\n    this.refMidBuffer = new Float32Array(this.overlapLength * 2);\n    this.midBuffer = new Float32Array(this.overlapLength * 2);\n  }\n\n  checkLimits(x, mi, ma) {\n    return x < mi ? mi : x > ma ? ma : x;\n  }\n\n  /**\n   * Calculates processing sequence length according to tempo setting\n   */\n  calculateSequenceParameters() {\n    let seq;\n    let seek;\n\n    if (this.autoSeqSetting) {\n      seq = AUTOSEQ_C + AUTOSEQ_K * this._tempo;\n      seq = this.checkLimits(seq, AUTOSEQ_AT_MAX, AUTOSEQ_AT_MIN);\n      this.sequenceMs = Math.floor(seq + 0.5);\n    }\n\n    if (this.autoSeekSetting) {\n      seek = AUTOSEEK_C + AUTOSEEK_K * this._tempo;\n      seek = this.checkLimits(seek, AUTOSEEK_AT_MAX, AUTOSEEK_AT_MIN);\n      this.seekWindowMs = Math.floor(seek + 0.5);\n    }\n\n    // Update seek window lengths\n    this.seekWindowLength = Math.floor(\n      (this.sampleRate * this.sequenceMs) / 1000\n    );\n    this.seekLength = Math.floor((this.sampleRate * this.seekWindowMs) / 1000);\n  }\n\n  /**\n   * Enables/disables the quick position seeking algorithm.\n   */\n  set quickSeek(enable) {\n    this._quickSeek = enable;\n  }\n\n  clone() {\n    const result = new Stretch();\n    result.tempo = this._tempo;\n    result.setParameters(\n      this.sampleRate,\n      this.sequenceMs,\n      this.seekWindowMs,\n      this.overlapMs\n    );\n    return result;\n  }\n\n  /**\n   * Seeks for the optimal overlap-mixing position.\n   */\n  seekBestOverlapPosition() {\n    return this._quickSeek\n      ? this.seekBestOverlapPositionStereoQuick()\n      : this.seekBestOverlapPositionStereo();\n  }\n\n  /**\n   * Seeks for the optimal overlap-mixing position. The 'stereo' version of the\n   * routine\n   *\n   * The best position is determined as the position where the two overlapped\n   * sample sequences are 'most alike', in terms of the highest cross-correlation\n   * value over the overlapping period\n   */\n  seekBestOverlapPositionStereo() {\n    let bestOffset;\n    let bestCorrelation;\n    let correlation;\n    let i = 0;\n\n    // Slopes the amplitudes of the 'midBuffer' samples\n    this.preCalculateCorrelationReferenceStereo();\n\n    bestOffset = 0;\n    bestCorrelation = Number.MIN_VALUE;\n\n    // Scans for the best correlation value by testing each possible position over the permitted range\n    for (; i < this.seekLength; i = i + 1) {\n      // Calculates correlation value for the mixing position corresponding to 'i'\n      correlation = this.calculateCrossCorrelationStereo(\n        2 * i,\n        this.refMidBuffer\n      );\n\n      // Checks for the highest correlation value\n      if (correlation > bestCorrelation) {\n        bestCorrelation = correlation;\n        bestOffset = i;\n      }\n    }\n\n    return bestOffset;\n  }\n\n  /**\n   * Seeks for the optimal overlap-mixing position. The 'stereo' version of the\n   * routine\n   *\n   * The best position is determined as the position where the two overlapped\n   * sample sequences are 'most alike', in terms of the highest cross-correlation\n   * value over the overlapping period\n   */\n  seekBestOverlapPositionStereoQuick() {\n    let bestOffset;\n    let bestCorrelation;\n    let correlation;\n    let scanCount = 0;\n    let correlationOffset;\n    let tempOffset;\n\n    // Slopes the amplitude of the 'midBuffer' samples\n    this.preCalculateCorrelationReferenceStereo();\n\n    bestCorrelation = Number.MIN_VALUE;\n    bestOffset = 0;\n    correlationOffset = 0;\n    tempOffset = 0;\n\n    // Scans for the best correlation value using four-pass hierarchical search.\n    //\n    // The look-up table 'scans' has hierarchical position adjusting steps.\n    // In first pass the routine searhes for the highest correlation with\n    // relatively coarse steps, then rescans the neighbourhood of the highest\n    // correlation with better resolution and so on.\n    for (; scanCount < 4; scanCount = scanCount + 1) {\n      let j = 0;\n      while (_SCAN_OFFSETS[scanCount][j]) {\n        tempOffset = correlationOffset + _SCAN_OFFSETS[scanCount][j];\n        if (tempOffset >= this.seekLength) {\n          break;\n        }\n\n        // Calculates correlation value for the mixing position corresponding to 'tempOffset'\n        correlation = this.calculateCrossCorrelationStereo(\n          2 * tempOffset,\n          this.refMidBuffer\n        );\n\n        // Checks for the highest correlation value\n        if (correlation > bestCorrelation) {\n          bestCorrelation = correlation;\n          bestOffset = tempOffset;\n        }\n        j = j + 1;\n      }\n      correlationOffset = bestOffset;\n    }\n\n    return bestOffset;\n  }\n\n  /**\n   * Slopes the amplitude of the 'midBuffer' samples so that cross correlation\n   * is faster to calculate\n   */\n  preCalculateCorrelationReferenceStereo() {\n    let i = 0;\n    let context;\n    let temp;\n\n    for (; i < this.overlapLength; i = i + 1) {\n      temp = i * (this.overlapLength - i);\n      context = i * 2;\n      this.refMidBuffer[context] = this.midBuffer[context] * temp;\n      this.refMidBuffer[context + 1] = this.midBuffer[context + 1] * temp;\n    }\n  }\n\n  calculateCrossCorrelationStereo(mixingPosition, compare) {\n    const mixing = this._inputBuffer.vector;\n    mixingPosition += this._inputBuffer.startIndex;\n\n    let correlation = 0;\n    let i = 2;\n    const calcLength = 2 * this.overlapLength;\n    let mixingOffset;\n\n    for (; i < calcLength; i = i + 2) {\n      mixingOffset = i + mixingPosition;\n      correlation +=\n        mixing[mixingOffset] * compare[i] +\n        mixing[mixingOffset + 1] * compare[i + 1];\n    }\n\n    return correlation;\n  }\n\n  // TODO inline\n  /**\n   * Overlaps samples in 'midBuffer' with the samples in 'pInputBuffer' at position\n   * of 'ovlPos'.\n   */\n  overlap(overlapPosition) {\n    this.overlapStereo(2 * overlapPosition);\n  }\n\n  /**\n   * Overlaps samples in 'midBuffer' with the samples in 'pInput'\n   */\n  overlapStereo(inputPosition) {\n    const input = this._inputBuffer.vector;\n    inputPosition += this._inputBuffer.startIndex;\n\n    const output = this._outputBuffer.vector;\n    const outputPosition = this._outputBuffer.endIndex;\n\n    let i = 0;\n    let context;\n    let tempFrame;\n    const frameScale = 1 / this.overlapLength;\n    let fi;\n    let inputOffset;\n    let outputOffset;\n\n    for (; i < this.overlapLength; i = i + 1) {\n      tempFrame = (this.overlapLength - i) * frameScale;\n      fi = i * frameScale;\n      context = 2 * i;\n      inputOffset = context + inputPosition;\n      outputOffset = context + outputPosition;\n      output[outputOffset + 0] =\n        input[inputOffset + 0] * fi + this.midBuffer[context + 0] * tempFrame;\n      output[outputOffset + 1] =\n        input[inputOffset + 1] * fi + this.midBuffer[context + 1] * tempFrame;\n    }\n  }\n\n  process() {\n    let offset;\n    let temp;\n    let overlapSkip;\n\n    if (this.midBuffer === null) {\n      // if midBuffer is empty, move the first samples of the input stream into it\n      if (this._inputBuffer.frameCount < this.overlapLength) {\n        // wait until we've got the overlapLength samples\n        return;\n      }\n      this.midBuffer = new Float32Array(this.overlapLength * 2);\n      this._inputBuffer.receiveSamples(this.midBuffer, this.overlapLength);\n    }\n\n    // Process samples as long as there are enough samples in 'inputBuffer' to form a processing frame\n    while (this._inputBuffer.frameCount >= this.sampleReq) {\n      // If tempo differs from the normal ('SCALE'), scan for hte best overlapping position\n      offset = this.seekBestOverlapPosition();\n\n      /**\n       * Mix the samples in the 'inputBuffer' at position of 'offset' with the samples in 'midBuffer'\n       * using sliding overlapping\n       * ... first partially overlap with the end of the previous sequence (that's in 'midBuffer')\n       */\n      this._outputBuffer.ensureAdditionalCapacity(this.overlapLength);\n      // FIXME unit?\n      // overlap(uint(offset));\n      this.overlap(Math.floor(offset));\n      this._outputBuffer.put(this.overlapLength);\n\n      // ... then copy sequence samples from 'inputBuffer' to output\n      temp = this.seekWindowLength - 2 * this.overlapLength; // & 0xfffffffe;\n      if (temp > 0) {\n        this._outputBuffer.putBuffer(\n          this._inputBuffer,\n          offset + this.overlapLength,\n          temp\n        );\n      }\n\n      /**\n       * Copies the end of the current sequence from 'inputBuffer' to 'midBuffer' for being mixed with\n       * the beginning of the next processing sequence and so on\n       */\n      // assert(offset + seekWindowLength <= (int)inputBuffer.numSamples());\n      const start =\n        this._inputBuffer.startIndex +\n        2 * (offset + this.seekWindowLength - this.overlapLength);\n      this.midBuffer.set(\n        this._inputBuffer.vector.subarray(start, start + 2 * this.overlapLength)\n      );\n\n      /**\n       * Remove the processed samples from the input buffer. Update the difference between\n       * integer & nominal skip step to 'skipFract' in order to prevent the error from\n       * accumulating over time\n       */\n      this.skipFract += this.nominalSkip; // real skip size\n      overlapSkip = Math.floor(this.skipFract);\n      this.skipFract -= overlapSkip;\n      this._inputBuffer.receive(overlapSkip);\n    }\n  }\n}\n","const testFloatEqual = function (a, b) {\n  return (a > b ? a - b : b - a) > 1e-10;\n};\n\nexport default testFloatEqual;\n","/*\n * SoundTouch JS audio processing library\n * Copyright (c) Olli Parviainen\n * Copyright (c) Ryan Berdeen\n * Copyright (c) Jakub Fiala\n * Copyright (c) Steve 'Cutter' Blades\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\n\nimport RateTransposer from './RateTransposer';\nimport Stretch from './Stretch';\nimport FifoSampleBuffer from './FifoSampleBuffer';\nimport testFloatEqual from './testFloatEqual';\n\nexport default class SoundTouch {\n  constructor() {\n    this.transposer = new RateTransposer(false);\n    this.stretch = new Stretch(false);\n\n    this._inputBuffer = new FifoSampleBuffer();\n    this._intermediateBuffer = new FifoSampleBuffer();\n    this._outputBuffer = new FifoSampleBuffer();\n\n    this._rate = 0;\n    this._tempo = 0;\n\n    this.virtualPitch = 1.0;\n    this.virtualRate = 1.0;\n    this.virtualTempo = 1.0;\n\n    this.calculateEffectiveRateAndTempo();\n  }\n\n  clear() {\n    this.transposer.clear();\n    this.stretch.clear();\n  }\n\n  clone() {\n    const result = new SoundTouch();\n    result.rate = this.rate;\n    result.tempo = this.tempo;\n    return result;\n  }\n\n  get rate() {\n    return this._rate;\n  }\n\n  set rate(rate) {\n    this.virtualRate = rate;\n    this.calculateEffectiveRateAndTempo();\n  }\n\n  set rateChange(rateChange) {\n    this._rate = 1.0 + 0.01 * rateChange;\n  }\n\n  get tempo() {\n    return this._tempo;\n  }\n\n  set tempo(tempo) {\n    this.virtualTempo = tempo;\n    this.calculateEffectiveRateAndTempo();\n  }\n\n  set tempoChange(tempoChange) {\n    this.tempo = 1.0 + 0.01 * tempoChange;\n  }\n\n  set pitch(pitch) {\n    this.virtualPitch = pitch;\n    this.calculateEffectiveRateAndTempo();\n  }\n\n  set pitchOctaves(pitchOctaves) {\n    this.pitch = Math.exp(0.69314718056 * pitchOctaves);\n    this.calculateEffectiveRateAndTempo();\n  }\n\n  set pitchSemitones(pitchSemitones) {\n    this.pitchOctaves = pitchSemitones / 12.0;\n  }\n\n  get inputBuffer() {\n    return this._inputBuffer;\n  }\n\n  get outputBuffer() {\n    return this._outputBuffer;\n  }\n\n  calculateEffectiveRateAndTempo() {\n    const previousTempo = this._tempo;\n    const previousRate = this._rate;\n\n    this._tempo = this.virtualTempo / this.virtualPitch;\n    this._rate = this.virtualRate * this.virtualPitch;\n\n    if (testFloatEqual(this._tempo, previousTempo)) {\n      this.stretch.tempo = this._tempo;\n    }\n    if (testFloatEqual(this._rate, previousRate)) {\n      this.transposer.rate = this._rate;\n    }\n\n    if (this._rate > 1.0) {\n      if (this._outputBuffer != this.transposer.outputBuffer) {\n        this.stretch.inputBuffer = this._inputBuffer;\n        this.stretch.outputBuffer = this._intermediateBuffer;\n\n        this.transposer.inputBuffer = this._intermediateBuffer;\n        this.transposer.outputBuffer = this._outputBuffer;\n      }\n    } else {\n      if (this._outputBuffer != this.stretch.outputBuffer) {\n        this.transposer.inputBuffer = this._inputBuffer;\n        this.transposer.outputBuffer = this._intermediateBuffer;\n\n        this.stretch.inputBuffer = this._intermediateBuffer;\n        this.stretch.outputBuffer = this._outputBuffer;\n      }\n    }\n  }\n\n  process() {\n    if (this._rate > 1.0) {\n      this.stretch.process();\n      this.transposer.process();\n    } else {\n      this.transposer.process();\n      this.stretch.process();\n    }\n  }\n}\n","/*\n * SoundTouch JS audio processing library\n * Copyright (c) Olli Parviainen\n * Copyright (c) Ryan Berdeen\n * Copyright (c) Jakub Fiala\n * Copyright (c) Steve 'Cutter' Blades\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\n\nexport default class WebAudioBufferSource {\n  constructor(buffer) {\n    this.buffer = buffer;\n    this._position = 0;\n  }\n\n  get dualChannel() {\n    return this.buffer.numberOfChannels > 1;\n  }\n\n  get position() {\n    return this._position;\n  }\n\n  set position(value) {\n    this._position = value;\n  }\n\n  extract(target, numFrames = 0, position = 0) {\n    this.position = position;\n    let left = this.buffer.getChannelData(0);\n    let right = this.dualChannel\n      ? this.buffer.getChannelData(1)\n      : this.buffer.getChannelData(0);\n    let i = 0;\n    for (; i < numFrames; i++) {\n      target[i * 2] = left[i + position];\n      target[i * 2 + 1] = right[i + position];\n    }\n    return Math.min(numFrames, left.length - position);\n  }\n}\n","import noop from './noop';\n/**\n * getWebAudioNode\n *\n * A wrapper to create an AudioNode and apply a filter for frame extraction\n * Copyright (c) Adrian Holovary https://github.com/adrianholovaty\n *\n * @param context - AudioContext\n * @param filter - Object containing an 'extract()' method\n * @param bufferSize - units of sample frames (256, 512, 1024, 2048, 4096, 8192, 16384)\n * @returns {ScriptProcessorNode}\n */\nconst getWebAudioNode = function (\n  context,\n  filter,\n  sourcePositionCallback = noop,\n  bufferSize = 4096\n) {\n  const node = context.createScriptProcessor(bufferSize, 2, 2);\n  const samples = new Float32Array(bufferSize * 2);\n\n  node.onaudioprocess = (event) => {\n    let left = event.outputBuffer.getChannelData(0);\n    let right = event.outputBuffer.getChannelData(1);\n    let framesExtracted = filter.extract(samples, bufferSize);\n    sourcePositionCallback(filter.sourcePosition);\n    if (framesExtracted === 0) {\n      filter.onEnd();\n    }\n    let i = 0;\n    for (; i < framesExtracted; i++) {\n      left[i] = samples[i * 2];\n      right[i] = samples[i * 2 + 1];\n    }\n  };\n  return node;\n};\n\nexport default getWebAudioNode;\n","const pad = function (n, width, z) {\n  z = z || '0';\n  n = n + '';\n  return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;\n};\n\nconst minsSecs = function (secs) {\n  const mins = Math.floor(secs / 60);\n  const seconds = secs - mins * 60;\n  return `${mins}:${pad(parseInt(seconds), 2)}`;\n};\n\nexport default minsSecs;\n","/*\n * SoundTouch JS audio processing library\n * Copyright (c) Olli Parviainen\n * Copyright (c) Ryan Berdeen\n * Copyright (c) Jakub Fiala\n * Copyright (c) Steve 'Cutter' Blades\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\n\nimport WebAudioBufferSource from './WebAudioBufferSource';\nimport getWebAudioNode from './getWebAudioNode';\nimport SoundTouch from './SoundTouch';\nimport SimpleFilter from './SimpleFilter';\nimport minsSecs from './minsSecs';\nimport noop from './noop';\n\nconst onUpdate = function (sourcePosition) {\n  const currentTimePlayed = this.timePlayed;\n  const sampleRate = this.sampleRate;\n  this.sourcePosition = sourcePosition;\n  this.timePlayed = sourcePosition / sampleRate;\n  if (currentTimePlayed !== this.timePlayed) {\n    const timePlayed = new CustomEvent('play', {\n      detail: {\n        timePlayed: this.timePlayed,\n        formattedTimePlayed: this.formattedTimePlayed,\n        percentagePlayed: this.percentagePlayed,\n      },\n    });\n    this._node.dispatchEvent(timePlayed);\n  }\n};\n\nexport default class PitchShifter {\n  constructor(context, buffer, bufferSize, onEnd = noop) {\n    this._soundtouch = new SoundTouch();\n    const source = new WebAudioBufferSource(buffer);\n    this.timePlayed = 0;\n    this.sourcePosition = 0;\n    this._filter = new SimpleFilter(source, this._soundtouch, onEnd);\n    this._node = getWebAudioNode(\n      context,\n      this._filter,\n      (sourcePostion) => onUpdate.call(this, sourcePostion),\n      bufferSize\n    );\n    this.tempo = 1;\n    this.rate = 1;\n    this.duration = buffer.duration;\n    this.sampleRate = context.sampleRate;\n    this.listeners = [];\n  }\n\n  get formattedDuration() {\n    return minsSecs(this.duration);\n  }\n\n  get formattedTimePlayed() {\n    return minsSecs(this.timePlayed);\n  }\n\n  get percentagePlayed() {\n    return (\n      (100 * this._filter.sourcePosition) / (this.duration * this.sampleRate)\n    );\n  }\n\n  set percentagePlayed(perc) {\n    this._filter.sourcePosition = parseInt(\n      perc * this.duration * this.sampleRate\n    );\n    this.sourcePosition = this._filter.sourcePosition;\n    this.timePlayed = this.sourcePosition / this.sampleRate;\n  }\n\n  get node() {\n    return this._node;\n  }\n\n  set pitch(pitch) {\n    this._soundtouch.pitch = pitch;\n  }\n\n  set pitchSemitones(semitone) {\n    this._soundtouch.pitchSemitones = semitone;\n  }\n\n  set rate(rate) {\n    this._soundtouch.rate = rate;\n  }\n\n  set tempo(tempo) {\n    this._soundtouch.tempo = tempo;\n  }\n\n  connect(toNode) {\n    this._node.connect(toNode);\n  }\n\n  disconnect() {\n    this._node.disconnect();\n  }\n\n  on(eventName, cb) {\n    this.listeners.push({ name: eventName, cb: cb });\n    this._node.addEventListener(eventName, (event) => cb(event.detail));\n  }\n\n  off(eventName = null) {\n    let listeners = this.listeners;\n    if (eventName) {\n      listeners = listeners.filter((e) => e.name === eventName);\n    }\n    listeners.forEach((e) => {\n      this._node.removeEventListener(e.name, (event) => e.cb(event.detail));\n    });\n  }\n}\n"],"names":["FifoSampleBuffer","constructor","_vector","Float32Array","_position","_frameCount","vector","position","startIndex","frameCount","endIndex","clear","receive","rewind","put","numFrames","putSamples","samples","sourceOffset","length","numSamples","ensureCapacity","destOffset","set","subarray","putBuffer","buffer","receiveSamples","output","extract","minLength","parseInt","newVector","ensureAdditionalCapacity","AbstractFifoSamplePipe","createBuffers","_inputBuffer","_outputBuffer","inputBuffer","outputBuffer","RateTransposer","reset","_rate","rate","slopeCount","prevSampleL","prevSampleR","clone","result","process","numFramesOutput","transpose","src","srcOffset","dest","used","i","out","srcIndex","FilterSupport","pipe","_pipe","fillInputBuffer","Error","fillOutputBuffer","numInputFrames","noop","SimpleFilter","sourceSound","callback","historyBufferSize","_sourcePosition","outputBufferPosition","RangeError","newOutputBufferPosition","sourcePosition","onEnd","numFramesExtracted","target","Math","min","currentFrames","max","handleSampleData","event","data","USE_AUTO_SEQUENCE_LEN","DEFAULT_SEQUENCE_MS","USE_AUTO_SEEKWINDOW_LEN","DEFAULT_SEEKWINDOW_MS","DEFAULT_OVERLAP_MS","_SCAN_OFFSETS","AUTOSEQ_TEMPO_LOW","AUTOSEQ_TEMPO_TOP","AUTOSEQ_AT_MIN","AUTOSEQ_AT_MAX","AUTOSEQ_K","AUTOSEQ_C","AUTOSEEK_AT_MIN","AUTOSEEK_AT_MAX","AUTOSEEK_K","AUTOSEEK_C","Stretch","_quickSeek","midBufferDirty","midBuffer","overlapLength","autoSeqSetting","autoSeekSetting","_tempo","setParameters","clearMidBuffer","sampleRate","sequenceMs","seekWindowMs","overlapMs","calculateSequenceParameters","calculateOverlapLength","tempo","newTempo","intskip","nominalSkip","seekWindowLength","skipFract","floor","sampleReq","seekLength","inputChunkSize","outputChunkSize","overlapInMsec","newOvl","refMidBuffer","checkLimits","x","mi","ma","seq","seek","quickSeek","enable","seekBestOverlapPosition","seekBestOverlapPositionStereoQuick","seekBestOverlapPositionStereo","bestOffset","bestCorrelation","correlation","preCalculateCorrelationReferenceStereo","Number","MIN_VALUE","calculateCrossCorrelationStereo","scanCount","correlationOffset","tempOffset","j","context","temp","mixingPosition","compare","mixing","calcLength","mixingOffset","overlap","overlapPosition","overlapStereo","inputPosition","input","outputPosition","tempFrame","frameScale","fi","inputOffset","outputOffset","offset","overlapSkip","start","testFloatEqual","a","b","SoundTouch","transposer","stretch","_intermediateBuffer","virtualPitch","virtualRate","virtualTempo","calculateEffectiveRateAndTempo","rateChange","tempoChange","pitch","pitchOctaves","exp","pitchSemitones","previousTempo","previousRate","WebAudioBufferSource","dualChannel","numberOfChannels","value","left","getChannelData","right","getWebAudioNode","filter","sourcePositionCallback","bufferSize","node","createScriptProcessor","onaudioprocess","framesExtracted","pad","n","width","z","Array","join","minsSecs","secs","mins","seconds","onUpdate","currentTimePlayed","timePlayed","CustomEvent","detail","formattedTimePlayed","percentagePlayed","_node","dispatchEvent","PitchShifter","_soundtouch","source","_filter","sourcePostion","call","duration","listeners","formattedDuration","perc","semitone","connect","toNode","disconnect","on","eventName","cb","push","name","addEventListener","off","e","forEach","removeEventListener"],"mappings":"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"}